Let me introduce the labor tracker!
This is actually something that Twin Oaks has been wanting for a while and I don't think it would be too difficult to implement.
Basically, here at Twin Oaks, everyone has a certain amount of labor they have to do per week. And, when someone does an hour of work then an hour of work (or, "labor credit") comes out of the area they worked in and goes into their personal budget. An example might be helpful. If I worked in the guarden for 5 hours then 5 hours would come out of the guarden's labor budget and go into mine. It's basically money.
Anyways, right now, we have people record the amount of hours they've worked on paper, and then someone else has to take all of those hours they've worked, subtract that amount from various budgets, and add that amount to those individuals' budgets. It's a lot of data entry.
To stream line this process, we'd like to build a web app that you can simply log on to, input how much labor you've done and in what area, and it automatically updates your labor balance and the labor budget you worked for! This might sound kind of simple but it will literally save dozens of hours of work per week.

Okay, so now that I've described what I'm making, I'll get into how I'm making it.
1 - it has dynamic behavior. It maintains a database which a user can update and view.
2 - There are several functionalities that this web app would accomplish. The first thing it would do is allow a user to input the amount of labor they've worked in a particular area. This would take the form of an input box for the user to put in the amount of hours worked, and a drop-down menu that would represent all the areas available to work in (there's only a finite amount although this list would be pretty long).
Once that was submitted, the program would subtract the amount worked from the relivant work area and would add the amount worked to the user's labor pool.
The user could also view how much labor they have in their labor pool (or "labor balance"). I'm imagining this as its own page. We could add in several other metrics here as well, such as a graph of time vs. hours worked, and the rate of change of said graph. This would allow the user to see at what rate their work is increasing by and compare how much they're currently working to how much they've worked before.
There're two more features that are vary important. The first one simply subtracts a set amount from all users' labor balance every week. This would simulate the amount of quota they must do per week. For example, if the current quota is 42 hours, then at the end of every week 42 hours would be subtracted from all users.
The second very important feature is specifically for users with some sort of admin privlages. They would be able to add extra hours to various areas' budgets (so that the budgets don't run out).
I think there might be a few other features we'd like to implement for the fully operational version but those seem sufficient for now.

3 - while I imagine that most of the processes will happen on the server side, there is absolutely some logic that could operate on the client side as well.
So, our users input data on a page that has a text box to input hours-worked and there would be a drop down menu to look for various labor budgets. But this list would be very long (like, I think over a hundered items long). To make this more user friendly we could add in a search feature to find certain labor areas. We could also have a host of keywords associated with each area. For exmaple, if you're working cutting down trees, but you don't know what that work area is called, then you could simply search "trees" and "cutting" and it would return the labor area Forestry (which is what that work area is called). This would be implemented on the client side.
There are many functions that would operate on the server side. All the operations that updated the database would be on the server side, as would be the code to produce the HTML page that allows the user to see their labor information. I think there would be many more things beside this as well, but, yeah, we'd certainly have logic that executes on the back-end components.
4 - We would absolutely support multiple users and we would keep track of each of those users' data. There are about 100 members at Twin Oaks so we would have about 100 active users at any given time.
5 - We would save the users' labor to a database so we would have persistence of data.
6 - We can absolutely host it on Google Cloud. So that's another box checked.